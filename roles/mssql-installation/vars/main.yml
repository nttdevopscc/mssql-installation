windows_domain: nttapdemo.com
windows_domain_admin: "nttmyadmin"
windows_domain_admin_password: "{{ vault_windows_domain_admin_password }}"

# Setup some base values for connectivity to windows hosts
# Using basic authentication because we're using a local account.
ansible_user: "nttmyadmin@NTTAPDEMO.COM"
#ansible_password: "{{ vault_ansible_password_windows }}"
ansible_winrm_transport: kerberos
#ansible_winrm_transport: ntlm
ansible_port: 5986
ansible_connection: winrm

# The following is necessary for Python 2.7.9+ when using default WinRM self-signed certificates:
ansible_winrm_server_cert_validation: ignore

# installation files source 
mssql_installation_source: https://go.microsoft.com/fwlink/?linkid=866658

# Path to download installation media to
mssql_installation_path: C:\SQLInstall

# Temporary path to store downloader
mssql_temp_download_path: C:\tmp

# instance details
mssql_instance_name: Test
mssql_drive: C
mssql_userdbvol_name: Userdbvol01
mssql_port: 1433

### Memory Configuration ###
# memory in MB
# values must be divisible by 512

# Max memory to allocate to this instance
mssql_max_server_memory: 1024

# Memory to reserve to the OS
mssql_os_memory_reservation: 512

# Total system memory 
mssql_total_system_memory: "{{ mssql_max_server_memory + mssql_os_memory_reservation }}"

# Suppress reboots that may occur during SQL Setup tasks
# you will want to set this to True if working on a sensitive system:
mssql_suppress_reboot: False

### Service Accounts ###

mssql_base_ldap_path: "cn=Users,dc=nttapdemo,dc=com"
domain_controller: nttmyaddc1

# SQL Service Account
# regex statements used in some steps expect the format of CONTOSO\
# do not use @CONTOSO.com for these accounts as SQL install will fail
mssql_sqlsvc_account: nttapdemo\sql_svc
mssql_sqlsvc_account_pass: "{{ vault_mssql_sqlsvc_account_pass }}"

# SQL Agent Service Account
mssql_agentsvc_account: nttapdemo\sql_agt
mssql_agentsvc_account_pass: "{{ vault_mssql_agentsvc_account_pass }}"

# SQL Analysis Services Account
mssql_assvc_account: "{{ mssql_sqlsvc_account }}"
mssql_assvc_account_pass: "{{ mssql_sqlsvc_account_pass }}"

### File and Folder Paths ###

# volume paths
mssql_userdbvol_path: "{{ mssql_drive }}:\\{{ mssql_userdbvol_name }}"
mssql_db_accesspath: "{{ mssql_userdbvol_path }}\\DatabaseFiles"
mssql_logs_accesspath: "{{ mssql_userdbvol_path }}\\DatabaseLogs"

# shared files paths
mssql_installshared_path: C:\Program Files\Microsoft SQL Server
mssql_installsharedwow_path: C:\Program Files (x86)\Microsoft SQL Server

# instance path
mssql_instance_path: "C:\\Program Files\\Microsoft SQL Server\\{{ mssql_instance_name }}"

# SQL DB and Logging Paths
mssql_sqlinstalldata_path: "{{ mssql_db_accesspath }}\\{{mssql_instance_name }}"
mssql_sqluserdata_path: "{{ mssql_db_accesspath }}\\{{mssql_instance_name }}"
mssql_sqluserlog_path: "{{ mssql_logs_accesspath }}\\{{mssql_instance_name }}"
mssql_sqltempDB_path: "C:\\TempDBFiles\\Data\\{{mssql_instance_name }}"
mssql_sqltempDBlog_path: "C:\\TempDBFiles\\Log\\{{mssql_instance_name }}"

# security mode - SQL indicates mixed-mode auth, while Windows indicates Windows Auth.
mssql_security_mode: sql

# SA user password, if security mode is set to 'SQL'
# by default for testing we'll be lazy and use the service account password,
# but on live systems you should use something else:
mssql_sa_password: "{{ mssql_sqlsvc_account_pass }}"

mssql_features: SQLENGINE,FULLTEXT,CONN

# Collation
mssql_collation: SQL_Latin1_General_CP1_CI_AS

# Browser service startup mode
# Specifies the startup mode for SQL Server Browser service. { Automatic | Disabled | 'Manual' }
mssql_browsersvc_mode: Automatic

# Default Account Access
# Ansible_Admin must be included so that the playbook can make configuration changes post install
mssql_sysadmin_accounts: 
  - nttapdemo\Domain Admins

# Analysis Services Admins (if installed)
mssql_asadmin_accounts: "{{ mssql_sysadmin_accounts }}"

mssql_max_degree_of_parallelism: 0

# Minimum memory to allocate to SQL
#
# Should remain 0 in most cases.
#
# see: Optimizing Server Performance Using Memory Configuration Options
# https://technet.microsoft.com/en-us/library/ms177455(v=sql.105).aspx
#
# The min server memory server configuration option can be used to ensure that 
# SQL Server does not release memory below the configured minimum server memory 
# once that threshold is reached. This configuration option can be set to a specific value 
# based on the size and activity of your SQL Server. If you choose to set this value, 
# set it to some reasonable value to ensure that the operating system does not request too 
# much memory from SQL Server, which can affect SQL Server performance.
mssql_min_server_memory: 0